(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{307:function(e,n,t){"use strict";t.r(n);var r=t(5),a=Object(r.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"监控及告警"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#监控及告警"}},[e._v("#")]),e._v(" 监控及告警")]),e._v(" "),n("h2",{attrs:{id:"监控"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#监控"}},[e._v("#")]),e._v(" 监控")]),e._v(" "),n("p",[e._v("在前端应用中添加监控器，例如 PerformanceObserver、MutationObserver 等，来捕获页面性能、用户行为等信息，并记录日志。这种方式需要了解监控器的使用方法和原理，需要一定的开发经验和技能。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const observer = new PerformanceObserver((list) => {\n  for (const entry of list.getEntries()) {\n    console.log(entry.name + ' ' + entry.startTime);\n    // 记录日志或将错误信息发送到服务器\n  }\n});\n\nobserver.observe({ entryTypes: ['longtask'] });\n")])])]),n("p",[e._v("使用第三方监控工具，例如 Sentry、ELK、LogRocket 等，它们可以通过不同的方式捕获前端应用程序的运行日志，并提供可视化的监控面板和报告。")]),e._v(" "),n("h2",{attrs:{id:"sentry"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sentry"}},[e._v("#")]),e._v(" Sentry")]),e._v(" "),n("h3",{attrs:{id:"实时错误追踪、捕获、记录和分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实时错误追踪、捕获、记录和分析"}},[e._v("#")]),e._v(" 实时错误追踪、捕获、记录和分析")]),e._v(" "),n("p",[e._v("Sentry 是一个开源的实时错误追踪平台，可以帮助开发人员捕获、记录和分析应用程序中的异常和错误。Sentry 支持多种编程语言和平台，包括 JavaScript、Python、Java、Ruby、Go、PHP、.NET 等。\n下面以 JavaScript 为例，演示如何在项目中集成 Sentry 并上报异常：")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("在 Sentry 官网注册账号并创建项目，获取项目的 DSN（Data Source Name）。")])]),e._v(" "),n("li",[n("p",[e._v("安装 Sentry 的 JavaScript SDK：")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npm install @sentry/browser\n")])])]),n("ol",{attrs:{start:"3"}},[n("li",[e._v("在项目中引入 Sentry SDK，并初始化：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import * as Sentry from '@sentry/browser';\n\nSentry.init({\n  dsn: 'YOUR_DSN',\n  // 其他配置选项\n});\n")])])]),n("ol",{attrs:{start:"4"}},[n("li",[e._v("在需要捕获异常的代码块中，使用 Sentry.captureException 方法捕获异常并上报：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("try {\n  // 可能会抛出异常的代码\n} catch (error) {\n  Sentry.captureException(error);\n}\n")])])]),n("p",[e._v("如果需要上报自定义消息，可以使用 Sentry.captureMessage 方法：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Sentry.captureMessage('Something went wrong');\n")])])]),n("ol",{attrs:{start:"5"}},[n("li",[e._v("在代码中使用 Sentry.setUser 方法设置用户信息：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Sentry.setUser({\n  email: 'user@example.com',\n  id: '1234',\n  username: 'username',\n});\n")])])]),n("ol",{attrs:{start:"6"}},[n("li",[e._v("在需要调试的代码中，使用 Sentry.addBreadcrumb 方法添加面包屑（Breadcrumb）：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Sentry.addBreadcrumb({\n  category: 'navigation',\n  message: 'User clicked on button',\n  data: {\n    page: 'homepage',\n    button: 'login',\n  },\n});\n")])])]),n("p",[e._v("Sentry 还提供了很多其他功能，例如自定义异常处理、性能监控、事件过滤、集成第三方工具等。开发人员可以根据实际需求选择并配置相应的功能。\n下面我们再详细说明一下上述Sentry的其他功能，并代码演示，例如自定义异常处理、性能监控、事件过滤、集成第三方工具")]),e._v(" "),n("h3",{attrs:{id:"自定义异常处理、性能监控、事件过滤、集成第三方工具等"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义异常处理、性能监控、事件过滤、集成第三方工具等"}},[e._v("#")]),e._v(" 自定义异常处理、性能监控、事件过滤、集成第三方工具等")]),e._v(" "),n("ol",[n("li",[e._v("自定义异常处理\n除了捕获和上报 JavaScript 异常，Sentry 还提供了自定义异常处理的功能，开发人员可以根据实际需求在代码中捕获和处理异常，并将其上报到 Sentry 中。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import * as Sentry from '@sentry/browser';\n\nfunction handleException() {\n  try {\n    // 可能会抛出异常的代码\n  } catch (error) {\n    Sentry.withScope(scope => {\n      scope.setTag('customTag', 'tagValue');\n      scope.setExtra('customExtra', 'extraValue');\n      Sentry.captureException(error);\n    });\n  }\n}\n")])])]),n("p",[e._v("在上面的代码中，使用 Sentry.withScope 方法设置额外的标签和数据，然后使用 Sentry.captureException 方法捕获和上报异常。这样可以更好地区分不同类型的异常和定位问题。")]),e._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[e._v("性能监控\n除了异常追踪，Sentry 还提供了性能监控的功能，可以帮助开发人员监控应用程序的性能指标，例如页面加载时间、API 请求时间等。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import * as Sentry from '@sentry/browser';\n\nSentry.init({\n  dsn: 'YOUR_DSN',\n  tracesSampleRate: 1.0,\n});\n\nfunction performTask() {\n  const transaction = Sentry.startTransaction({\n    op: 'task',\n    name: 'Task Name',\n  });\n\n  // 进行任务的代码\n\n  transaction.finish();\n}\n")])])]),n("p",[e._v("在上面的代码中，使用 Sentry.startTransaction 方法创建一个事务（Transaction），然后在任务完成时使用 transaction.finish() 方法结束事务，并将性能指标上报到 Sentry 中。通过设置 tracesSampleRate 参数，可以控制上报性能数据的采样率。")]),e._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[e._v("事件过滤\nSentry 还提供了事件过滤的功能，可以帮助开发人员排除一些不必要的事件，例如调试信息、健康检查等。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import * as Sentry from '@sentry/browser';\n\nSentry.init({\n  dsn: 'YOUR_DSN',\n  beforeSend(event, hint) {\n    if (event.tags && event.tags.noisy) {\n      return null;\n    }\n    if (event.message && event.message.includes('debug')) {\n      return null;\n    }\n    return event;\n  },\n});\n")])])]),n("p",[e._v("在上面的代码中，使用 beforeSend 方法过滤不需要上报的事件。例如，如果事件中包含 noisy 标签，则不上报；如果事件中包含 debug 关键字，则不上报。")]),e._v(" "),n("ol",{attrs:{start:"4"}},[n("li",[e._v("集成第三方工具\nSentry 还支持与许多第三方工具进行集成，例如 Slack、GitHub、Jira 等。开发人员可以在 Sentry 控制台中配置集成，然后在代码中使用相应的 SDK 进行操作。")])]),e._v(" "),n("p",[e._v("以 Slack 集成为例：")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("在 Sentry 控制台中创建 Slack 集成。")])]),e._v(" "),n("li",[n("p",[e._v("安装 @sentry/integrations 和 @slack/webhook：")])]),e._v(" "),n("li",[n("p",[e._v("在代码中引入 @sentry/integrations 和 @slack/webhook，并配置：")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import * as Sentry from '@sentry/browser';\nimport { Integrations } from '@sentry/integrations';\nimport { IncomingWebhook } from '@slack/webhook';\n\nSentry.init({\n  dsn: 'YOUR_DSN',\n  integrations: [\n    new Integrations.OnUncaughtException(),\n    new Integrations.OnUnhandledRejection(),\n  ],\n  beforeSend(event) {\n    if (event.exception) {\n      event.exception.values[0].value += ' (sent via Slack)';\n    }\n    return event;\n  },\n});\n\nconst webhook = new IncomingWebhook('YOUR_SLACK_WEBHOOK_URL');\nSentry.addGlobalEventProcessor(async event => {\n  if (event.user) {\n    const user = await fetchUser(event.user);\n    event.user = user;\n  }\n  return event;\n});\n")])])]),n("ul",[n("li",[n("p",[e._v("在 beforeSend 方法中对事件进行处理，例如添加标记和数据。")])]),e._v(" "),n("li",[n("p",[e._v("在 Sentry.addGlobalEventProcessor 方法中对事件进行处理，例如将用户 ID 转换为用户名。")])]),e._v(" "),n("li",[n("p",[e._v("在需要发送通知的地方调用 webhook.send 方法发送消息到 Slack。")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("try {\n  // 可能会抛出异常的代码\n} catch (error) {\n  Sentry.captureException(error);\n  webhook.send({\n    text: 'An error occurred!',\n  });\n}\n")])])]),n("p",[e._v("通过以上操作，就可以将 Sentry 与 Slack 集成起来，实现错误通知和处理。其他第三方工具的集成方法类似，具体可以参考 Sentry 的文档。")]),e._v(" "),n("p",[e._v("总的来说，Sentry 提供了丰富的功能和灵活的配置，可以帮助开发人员更好地追踪和处理应用程序中的错误和性能问题，提高应用程序的可靠性和用户体验。")]),e._v(" "),n("h3",{attrs:{id:"sentry的dsn是什么及如何配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sentry的dsn是什么及如何配置"}},[e._v("#")]),e._v(" sentry的dsn是什么及如何配置")]),e._v(" "),n("p",[e._v("Sentry 中的 dsn 是指数据源名称（Data Source Name），它是用于 Sentry 与项目之间进行通信的凭据，包含了 Sentry 项目的唯一标识符和认证信息等信息。在 Sentry 中，每个项目都有一个唯一的 dsn。")]),e._v(" "),n("p",[e._v("dsn 的值通常由以下几部分组成：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<PROTOCOL>://<PUBLIC_KEY>:<SECRET_KEY>@<HOST>/<PATH>/<PROJECT_ID>\n")])])]),n("p",[e._v("其中：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<PROTOCOL>：协议，默认为 https。\n<PUBLIC_KEY>：公钥，用于认证。\n<SECRET_KEY>：私钥，用于认证。\n<HOST>：Sentry 服务器的主机名。\n<PATH>：可选，指定 Sentry API 的路径。\n<PROJECT_ID>：项目 ID，用于唯一标识 Sentry 中的项目。\n")])])]),n("p",[e._v("要使用 Sentry，您需要创建一个 Sentry 项目并获取该项目的 dsn。您可以在 Sentry 中创建项目后，从项目的设置页面复制 dsn。例如，一个 dsn 的值可能类似于以下内容：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("https://abc123@sentry.io/12345\n")])])]),n("p",[e._v("在配置 Sentry 时，您需要将该 dsn 值传递给 Sentry.init() 方法。例如：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import * as Sentry from '@sentry/browser';\n\nSentry.init({\n  dsn: 'https://abc123@sentry.io/12345',\n  // 其他配置\n});\n")])])]),n("p",[e._v("在此示例中，我们将 dsn 值作为 Sentry.init() 方法的一个配置选项进行传递。Sentry 会使用此 dsn 值来初始化与 Sentry 服务器之间的通信。请注意，此示例中的 dsn 值仅供示范用途，您需要替换为自己的 Sentry 项目的 dsn 值。")]),e._v(" "),n("h3",{attrs:{id:"sentry原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sentry原理"}},[e._v("#")]),e._v(" sentry原理")]),e._v(" "),n("h4",{attrs:{id:"原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[e._v("#")]),e._v(" 原理")]),e._v(" "),n("p",[e._v("Javascript代码发生错误后，Javascript引擎会抛出一个Error对象，并触发window.onerror事件，Sentry正是对window.onerror进行重写，实现错误监控的逻辑，并添加了很多信息帮助错误定位，并对错误进行滚跨浏览器的兼容等")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("window.onerror\n捕获基本的js错误，但不能获取到资源加载失败的情况，必须使用window.addEventListener('error')才行")])]),e._v(" "),n("li",[n("p",[e._v("Promise\nPromise 如果reject没被catch的话，不能被window.onerror捕获，需要使用unhandledrejection捕获")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('window.addEventListener("unhandledrejection", event => {\n  console.warn(`UNHANDLED PROMISE REJECTION: ${event.reason}`);\n});\n')])])]),n("ol",{attrs:{start:"3"}},[n("li",[e._v("Vue的Vue.config.errorHandler\nSentry对Vue.config.errorHandler进行重写")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function vuePlugin(Raven, Vue) {\n  var _oldOnError = Vue.config.errorHandler;\n  Vue.config.errorHandler = function VueErrorHandler(error, vm, info) {\n    // 上报\n    Raven.captureException(error, {\n      extra: metaData\n    });\n\n    if (typeof _oldOnError === 'function') {\n      // 为什么这么做？\n      _oldOnError.call(this, error, vm, info);\n    }\n  };\n}\nmodule.exports = vuePlugin;\n")])])]),n("ul",[n("li",[e._v("React的ErrorBoundary")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("/**\n* A ErrorBoundary component that logs errors to Sentry.\n* Requires React >= 16\n*/\ndeclare class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n    state: ErrorBoundaryState;\n    componentDidCatch(error: Error, { componentStack }: React.ErrorInfo): void;\n    componentDidMount(): void;\n    componentWillUnmount(): void;\n    resetErrorBoundary: () => void;\n    render(): React.ReactNode;\n}\n\n// 真实上报的地方\nErrorBoundary.prototype.componentDidCatch = function (error, _a) {\n  var _this = this;\n  var componentStack = _a.componentStack;\n  // 获取到配置的props\n  var _b = this.props, beforeCapture = _b.beforeCapture, onError = _b.onError, showDialog = _b.showDialog, dialogOptions = _b.dialogOptions;\n  withScope(function (scope) {\n    // 上报之前做一些处理，相当于axios的请求拦截器\n    if (beforeCapture) {\n      beforeCapture(scope, error, componentStack);\n    }\n    // 上报\n    var eventId = captureException(error, { contexts: { react: { componentStack: componentStack } } });\n    // 开发者的回调\n    if (onError) {\n      onError(error, componentStack, eventId);\n    }\n    // 是否显示sentry的错误反馈组件（也是一种收集错误的方式）\n    if (showDialog) {\n      showReportDialog(__assign(__assign({}, dialogOptions), { eventId: eventId }));\n    }\n    // componentDidCatch is used over getDerivedStateFromError\n    // so that componentStack is accessible through state.\n    _this.setState({ error: error, componentStack: componentStack, eventId: eventId });\n  });\n};\n")])])]),n("ol",{attrs:{start:"4"}},[n("li",[e._v("请求\nSentry不能捕获异步操作、接口请求中的错误，比如404、500等，此时需要通过Sentry.caputureException()主动上报")])]),e._v(" "),n("ul",[n("li",[e._v("XHR通过拦截send和open")]),e._v(" "),n("li",[e._v("fetch通过拦截整个方法")]),e._v(" "),n("li",[e._v("axios通过请求/响应拦截器")])]),e._v(" "),n("h4",{attrs:{id:"接入sourcemap"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#接入sourcemap"}},[e._v("#")]),e._v(" 接入SourceMap")]),e._v(" "),n("p",[e._v("使用Sentry的webpack插件配置sourceMap，在构建的时候自动上传到Sentry，如果不上传SourceMap有些问题不好定位"),n("br"),e._v("\nSentry一共提供了三种上传source map的方式")]),e._v(" "),n("ol",[n("li",[e._v("Sentry-cli")])]),e._v(" "),n("p",[n("a",{attrs:{href:"https://docs.sentry.io/platforms/javascript/sourcemaps/#webpack"}},[e._v("Sentry-cli")])]),e._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[e._v("使用API上传")])]),e._v(" "),n("p",[n("a",{attrs:{href:"https://docs.sentry.io/api/"}},[e._v("使用API上传")])]),e._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[e._v("使用webpack plugins")])]),e._v(" "),n("ul",[n("li",[e._v("安装@sentry/webpack-plugin")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npm install --save-dev @sentry/webpack-plugin\n")])])]),n("ul",[n("li",[e._v("项目根目录添加.sentryclirc文件")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[auth]\ntoken = ef5b031a00964f3c8f8ccbca07bb03c1d950be4b33f24ff\n\n[defaults]\nurl = https://sentry-monitor.xxx.com/\norg = xxx\nproject = xxx\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("token：sentry的Auth Token，settings -> account -> api -> auth-tokens\nurl：sentry地址\norg：组织settings -> settings/organization-slug\nproject：项目名称\n")])])]),n("ul",[n("li",[e._v("配置webpack")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('const SentryWebpackPlugin = require("@sentry/webpack-plugin");\n \nmodule.exports = {\n  // other webpack configuration\n  devtool: \'source-map\',\n  // 将 Webpack 插件设置为最后运行的插件  否则插件收到的 source maps 可能不是最终的\n  plugins: [\n    new SentryWebpackPlugin({\n      release:"v1.0.1",\n      include: ".", \n      ignore: ["node_modules", "webpack.config.js"],\n      configFile: "sentry.properties",\n    }),\n  ],\n};\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("release：每次上传sourcemap是一次release的过程，如果init时没有配置release属性，sentry会自动生成一个随机数作为release版本；配置的话需要init和webpack配置中的一致\ninclude：指定路径让sentry-cli来检测有没有.map与.js文件，如果有就会上传到sentry\nignore: 忽略文件夹或文件不要被检测\nconfigFile: 用来替代第二步的.sentryclirc文件 需要有对应的文件 默认不配置即可\n")])])]),n("p",[e._v("在sentry上就会有对应项目的 Source Map 文件；（在settings -> projects -> xxx -> Source Maps）")]),e._v(" "),n("ol",{attrs:{start:"4"}},[n("li",[e._v("@sentry/webpack-plugin原理")])]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/getsentry/sentry-webpack-plugin"}},[e._v("@sentry/webpack-plugin原理")])]),e._v(" "),n("p",[e._v("在webpack的afterEmit钩子（在生成文件到output目录之后执行）中获取打包后的文件，过滤出文件类型为/.js$|.map$/结尾的文件上传到对应的sentry服务器")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// upload sourcemaps\napply(compiler) {\n  // afterEmit在生成文件到output目录之后执行\n  compiler.hooks.afterEmit.tapAsync(this.name, async (compilation, callback) => {\n    const files = this.getFiles(compilation);\n    try {\n      await this.createRelease();\n      await this.uploadFiles(files);\n      console.info('\\n\\u001b[32mUpload successfully.\\u001b[39m\\n');\n    } catch (error) {\n      // todo\n    }\n    callback(null);\n  });\n}\n // 获取需要上传的文件\n getFiles(compilation) {\n   // 通过 compilation.assets 获取我们需要的文件信息，格式信息\n      // compilation.assets {\n      // 'bundle.js': SizeOnlySource { _size: 212 },\n      // 'bundle.js.map': SizeOnlySource { _size: 162 }\n      // }\n  return Object.keys(compilation.assets)\n    .map((name) => {\n    if (this.isIncludeOrExclude(name)) {\n      return { name, filePath: this.getAssetPath(compilation, name) };\n    }\n    return null;\n  })\n    .filter(Boolean);\n}\n // 获取文件的绝对路径\n getAssetPath(compilation, name) {\n    return path.join(compilation.getPath(compilation.compiler.outputPath), name.split('?')[0]);\n }\n // 获取文件的绝对路径\n getAssetPath(compilation, name) {\n    return path.join(compilation.getPath(compilation.compiler.outputPath), name.split('?')[0]);\n }\n // 上传文件\n async uploadFile({ filePath, name }) {\n   console.log(filePath);\n   try {\n     await request({\n       url: `${this.sentryReleaseUrl()}/${this.release}/files/`, // 上传的sentry路径\n       method: 'POST',\n       auth: {\n         bearer: this.apiKey,\n       },\n       headers: {},\n       formData: {\n         file: fs.createReadStream(filePath),\n         name: this.filenameTransform(name),\n       },\n     });\n   } catch (e) {\n     console.error(`uploadFile failed ${filePath}`);\n   }\n }\n")])])]),n("p",[e._v("webpack钩子")]),e._v(" "),n("ul",[n("li",[e._v("done: 编译完成后")]),e._v(" "),n("li",[e._v("beforeRun: 在编译器执行前")]),e._v(" "),n("li",[e._v("run: 在编译器开始读取记录前执行")]),e._v(" "),n("li",[e._v("emit: 在生成文件到output目录之前执行")]),e._v(" "),n("li",[e._v("afterEmit: 在生成文件到output目录之后执行")]),e._v(" "),n("li",[e._v("compilation: 创建compilation后")]),e._v(" "),n("li",[e._v("beforeCompile: 在编译前")]),e._v(" "),n("li",[e._v("compile: 创建compilation前")]),e._v(" "),n("li",[e._v("make:编译完成前")])])])}),[],!1,null,null,null);n.default=a.exports}}]);