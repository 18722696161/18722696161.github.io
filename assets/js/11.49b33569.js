(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{251:function(e,t,a){e.exports=a.p+"assets/img/youhua27.5750a112.png"},252:function(e,t,a){e.exports=a.p+"assets/img/youhua25.c41c3a30.png"},253:function(e,t,a){e.exports=a.p+"assets/img/youhua26.6d955fd0.png"},290:function(e,t,a){"use strict";a.r(t);var s=a(5),r=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"chrome插件开发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chrome插件开发"}},[e._v("#")]),e._v(" chrome插件开发")]),e._v(" "),t("h2",{attrs:{id:"chrome开发步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chrome开发步骤"}},[e._v("#")]),e._v(" chrome开发步骤")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("了解Chrome插件的基础知识：在开发Chrome插件之前，需要先了解Chrome插件的基本知识和概念。可以在Google开发者文档中找到相关的介绍和文档。")])]),e._v(" "),t("li",[t("p",[e._v("创建插件清单文件（manifest.json）：插件清单文件是插件的核心文件，定义了插件的名称、版本、权限、页面等。必须创建一个manifest.json文件，并将其保存在插件根目录下。")])]),e._v(" "),t("li",[t("p",[e._v("编写HTML、CSS和JavaScript代码：Chrome插件的UI通常是基于HTML和CSS开发的，逻辑是基于JavaScript编写的。开发人员可以根据自己的需求编写相应的代码。")])]),e._v(" "),t("li",[t("p",[e._v("加载内容脚本：内容脚本是一种特殊的JavaScript文件，可以在Web页面中注入并与其交互。开发人员可以使用内容脚本扩展Web页面的功能和样式。")])]),e._v(" "),t("li",[t("p",[e._v("添加图标和资源：可以将图标和其他资源添加到插件中，以提供更好的用户体验。")])]),e._v(" "),t("li",[t("p",[e._v("测试和调试：完成代码编写后，需要进行测试和调试。Chrome提供了一些工具来帮助开发人员测试和调试插件，如Chrome DevTools和Chrome浏览器扩展程序。")])]),e._v(" "),t("li",[t("p",[e._v("发布插件：在完成测试和调试后，可以将插件上传到Chrome Web商店并发布。要发布插件，需要注册一个Chrome开发者账户，并遵循一些规则和审核流程。")])])]),e._v(" "),t("h2",{attrs:{id:"具体开发步骤例子-贴吧自动签到"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#具体开发步骤例子-贴吧自动签到"}},[e._v("#")]),e._v(" 具体开发步骤例子：贴吧自动签到")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("创建一个名为“manifest.json”的文件，并设置必要的基本信息，如插件名称、版本号、描述、图标等。")])]),e._v(" "),t("li",[t("p",[e._v("创建一个名为“background.js”的文件，该文件将在Chrome后台运行。在该文件中，可以使用Chrome提供的API来监听浏览器事件，并在需要时执行相关的操作。")])]),e._v(" "),t("li",[t("p",[e._v("在“background.js”文件中，使用Chrome提供的API来打开贴吧页面，并模拟用户登录账户。")])]),e._v(" "),t("li",[t("p",[e._v("在登录成功后，使用Chrome提供的API来自动定位到签到按钮，并模拟用户点击按钮完成签到操作。")])]),e._v(" "),t("li",[t("p",[e._v("将签到结果保存到本地存储，以便下次启动插件时进行检查。")])]),e._v(" "),t("li",[t("p",[e._v("创建一个名为“popup.html”的文件，该文件将用于在弹出窗口中显示插件的用户界面。在该文件中，可以使用HTML和CSS来构建用户界面。")])]),e._v(" "),t("li",[t("p",[e._v("在“popup.html”文件中，使用JavaScript编写代码来获取并显示签到结果。")])]),e._v(" "),t("li",[t("p",[e._v("将插件打包成CRX格式的文件，并发布到Chrome Web商店。")])])]),e._v(" "),t("h2",{attrs:{id:"发布chrome插件的步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#发布chrome插件的步骤"}},[e._v("#")]),e._v(" 发布Chrome插件的步骤")]),e._v(" "),t("p",[e._v("有以下几个步骤：")]),e._v(" "),t("ol",[t("li",[e._v("打包插件\n在发布之前，需要将插件代码打包成一个crx文件。可以使用Chrome浏览器自带的打包工具，也可以使用第三方工具，例如crxmake和crx_pack等。以Chrome自带打包工具为例，操作步骤如下：")])]),e._v(" "),t("p",[e._v("1）将插件代码文件夹命名为“AutoSign-for-Tieba”（插件名），并确保其中包含manifest.json文件和所有的插件代码文件。")]),e._v(" "),t("p",[e._v("2）打开Chrome浏览器，点击右上角的菜单按钮，选择“更多工具” -> “扩展程序”。")]),e._v(" "),t("p",[e._v("3）在扩展程序页面上，勾选“开发者模式”，然后点击“打包扩展程序”。")]),e._v(" "),t("p",[e._v("4）在弹出的对话框中，选择插件代码所在的文件夹，然后点击“打包扩展程序”。")]),e._v(" "),t("p",[e._v("5）打包完成后，会生成一个.crx文件和一个.pem文件。其中，.crx文件是插件的安装包，.pem文件是密钥文件，用于后续更新插件。")]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[e._v("注册Chrome开发者账号\n要发布Chrome插件，需要先注册一个Chrome开发者账号。具体操作步骤如下：")])]),e._v(" "),t("p",[e._v("1）打开Chrome开发者控制台网站（https://chrome.google.com/webstore/devconsole/）。")]),e._v(" "),t("p",[e._v("2）点击右上角的“登录”按钮，然后使用您的Google账号登录。")]),e._v(" "),t("p",[e._v("3）在登录后，您会被重定向到开发者控制台首页。在首页上，点击“添加新项目”。")]),e._v(" "),t("p",[e._v("4）在添加新项目页面上，填写插件的基本信息，例如名称、描述、类别、语言等。")]),e._v(" "),t("p",[e._v("5）在“上传”选项卡中，上传之前打包好的.crx文件。")]),e._v(" "),t("p",[e._v("6）在“发布”选项卡中，选择“公开发布”或“受限发布”，并填写相应的信息。")]),e._v(" "),t("p",[e._v("7）在“付款”选项卡中，设置付款方式并支付发布费用（目前是$5）。")]),e._v(" "),t("p",[e._v("8）发布完成后，您的插件将会被提交审核。审核通过后，插件就可以在Chrome Web Store上免费下载和使用了。")]),e._v(" "),t("p",[e._v("请注意，Chrome Web Store审核时间可能会比较长，需要耐心等待。同时，如果您的插件中使用了第三方服务或库，需要确保遵守相应的开源协议和版权规定，否则可能会导致审核失败或侵权问题。")]),e._v(" "),t("h2",{attrs:{id:"开发完的文件需要打包成ctx文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开发完的文件需要打包成ctx文件"}},[e._v("#")]),e._v(" 开发完的文件需要打包成ctx文件")]),e._v(" "),t("p",[e._v("如何打包成ctx文件呢？可以按照以下步骤进行操作：")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("将插件文件夹压缩成zip文件：将贴吧自动签到插件的所有文件打包成一个zip文件，包括manifest.json、background.js、content_script.js等。")])]),e._v(" "),t("li",[t("p",[e._v("转换成.crx文件：将zip文件的后缀名改为.crx，例如将插件文件夹压缩成的my-plugin.zip改名为my-plugin.crx。")])]),e._v(" "),t("li",[t("p",[e._v("签名CRX文件：Chrome浏览器只允许安装已签名的CRX文件，因此需要对CRX文件进行签名。可以使用Chrome浏览器自带的命令行工具chrome.exe来进行签名。在命令行中输入以下命令：")])])]),e._v(" "),t("p",[e._v("window系统中：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("chrome.exe --pack-extension=path/to/unpacked/extension --pack-extension-key=path/to/your/key.pem\n")])])]),t("p",[e._v("mac系统中：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("google\\ chrome --pack-extension=path/to/unpacked/extension --pack-extension-key=path/to/your/key.pem\n本人项目的目录为：\nGoogle\\ Chrome --pack-extension=/Users/phr/Desktop/project/AutoSignforTieba --pack-extension-key=/Users/phr/Desktop/project/key_pkcs8.pem\n")])])]),t("p",[e._v("其中，path/to/unpacked/extension是指插件文件夹的路径，path/to/your/key.pem是指您自己生成的私钥文件的路径。如果您还没有生成私钥文件，可以使用以下命令生成：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("openssl genrsa -out key.pem 2048\n")])])]),t("p",[e._v("这将在当前目录下生成一个2048位的RSA私钥文件key.pem。")]),e._v(" "),t("p",[e._v("注意：path/to/unpacked/extension 指的是未打包的扩展程序的路径，也就是未压缩成 CRX 格式的扩展程序文件夹所在的路径。在开发扩展程序时，通常使用未打包的扩展程序进行调试和测试，而在发布扩展程序时，则需要将扩展程序打包成 CRX 格式。因此，在使用 google\\ chrome 命令安装未打包的扩展程序时，需要指定未打包的扩展程序文件夹的路径，而不是 CRX 文件的路径。")]),e._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[e._v("安装签名后的CRX文件：签名后，会在插件文件夹的同级目录下生成一个新的CRX文件，例如my-plugin.crx。在Chrome浏览器中打开“扩展程序”页面，将CRX文件拖入页面中即可安装。")])]),e._v(" "),t("p",[e._v("注意：上述的执行命令中需要把chrome浏览器加入到环境变量中才可以执行命令")]),e._v(" "),t("p",[e._v("如果出现报错：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("command not found: google-chrome\n")])])]),t("p",[e._v("说明命令打的不对")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("google-chrome --pack-extension=path/to/unpacked/extension --pack-extension-key=path/to/your/key.pem\n")])])]),t("p",[e._v("这样的话就会报错，把’-‘换成’\\‘就可以了，转义一下")]),e._v(" "),t("h2",{attrs:{id:"例子-mac中"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#例子-mac中"}},[e._v("#")]),e._v(" 例子：mac中")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("打开终端应用程序。")])]),e._v(" "),t("li",[t("p",[e._v("输入以下命令，将 Chrome 浏览器的路径添加到 PATH 环境变量中：")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('export PATH="/Applications/Google Chrome.app/Contents/MacOS:$PATH"\n')])])]),t("p",[e._v('其中 "/Applications/Google Chrome.app/Contents/MacOS" 是 Chrome 浏览器的路径，可以根据实际情况进行修改。')]),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[e._v("如果您希望每次启动终端应用程序时都自动添加 Chrome 浏览器的路径到 PATH 环境变量中，可以将上述命令添加到终端应用程序的配置文件中。打开终端应用程序，输入以下命令：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("nano ~/.bash_profile\n")])])]),t("p",[e._v("这将打开一个文本编辑器，您可以在其中添加上述命令，然后按下 Ctrl + X，输入 Y 确认保存，再按下 Enter 退出编辑器。")]),e._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[e._v("最后，需要重启终端应用程序，以使 PATH 环境变量的修改生效。\n如果您希望在脚本中使用 Chrome 浏览器的命令，可以使用以下代码来执行命令：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('#!/bin/bash\n\n# 将 Chrome 浏览器的路径添加到 PATH 环境变量中\nexport PATH="/Applications/Google Chrome.app/Contents/MacOS:$PATH"\n\n# 在 Chrome 浏览器中打开指定网页\ngoogle-chrome https://www.google.com\n')])])]),t("p",[e._v("其中 google-chrome 命令用于在 Chrome 浏览器中打开指定网页，而 $PATH 可以访问 PATH 环境变量中的路径。")]),e._v(" "),t("h2",{attrs:{id:"报错解决方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#报错解决方式"}},[e._v("#")]),e._v(" 报错解决方式")]),e._v(" "),t("h3",{attrs:{id:"终端启动报错"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#终端启动报错"}},[e._v("#")]),e._v(" 终端启动报错：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/Users/phr/.bash_profile:source:1: no such file or directory: /Users/phr/.bashrc\n")])])]),t("p",[e._v("这个错误提示表明在执行 source 命令时找不到 .bashrc 文件。一般情况下，.bashrc 文件是在用户的 home 目录下存放的，而且默认情况下，MacOS 并不会自动创建该文件，所以您需要手动创建该文件。")]),e._v(" "),t("p",[e._v("如果您已经手动创建了 .bashrc 文件，那么可能是文件路径设置错误，您可以检查一下文件路径是否正确。")]),e._v(" "),t("p",[e._v("如果您不需要使用 .bashrc 文件，可以直接在 .bash_profile 文件中设置环境变量，而不需要使用 source 命令来加载 .bashrc 文件。例如，可以在 .bash_profile 文件中添加以下内容：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('export PATH="/Applications/Google Chrome.app/Contents/MacOS:$PATH"\n')])])]),t("h3",{attrs:{id:"bashrc文件含义和问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bashrc文件含义和问题"}},[e._v("#")]),e._v(" .bashrc文件含义和问题")]),e._v(" "),t("p",[e._v(".bashrc 文件是 Bash shell 在启动时会自动执行的一个脚本文件，它可以用于设置 Bash shell 的一些配置和环境变量。")]),e._v(" "),t("p",[e._v("在 Mac 系统中，由于默认使用的是 Bash shell，因此可以通过创建 .bashrc 文件来配置环境变量。创建 .bashrc 文件的步骤如下：\n.bashrc 文件通常位于用户的 home 目录下，其完整路径为 ~/.bashrc。在终端中可以使用 ls -a 命令显示所有文件和文件夹，包括隐藏的文件和文件夹，来查找 .bashrc 文件。您可以在终端中输入以下命令来查找 .bashrc 文件的位置：")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("打开终端应用程序（Terminal）；")])]),e._v(" "),t("li",[t("p",[e._v("在终端中输入以下命令来创建一个新的 .bashrc 文件：")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("touch ~/.bashrc\n")])])]),t("p",[e._v("这将在用户的 home 目录下创建一个名为 .bashrc 的空文件。")]),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[e._v("使用任意文本编辑器打开 .bashrc 文件，例如：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("nano ~/.bashrc\n")])])]),t("p",[e._v("这将在终端中打开一个新的 Nano 编辑器窗口，并显示 .bashrc 文件的内容（因为此时该文件还是空文件）。")]),e._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[e._v("在 .bashrc 文件中添加需要设置的环境变量或 Bash 配置，例如：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('export PATH="/Applications/Google Chrome.app/Contents/MacOS:$PATH"\n')])])]),t("p",[e._v("这将把 Chrome 浏览器的执行文件目录添加到系统的 PATH 环境变量中。")]),e._v(" "),t("ol",{attrs:{start:"5"}},[t("li",[e._v("保存并退出 .bashrc 文件：")])]),e._v(" "),t("ul",[t("li",[e._v("在 Nano 编辑器中，可以按 Ctrl+X 键，然后按 Y 键确认保存修改；")]),e._v(" "),t("li",[e._v("在其他文本编辑器中，保存文件并关闭编辑器即可。")])]),e._v(" "),t("ol",{attrs:{start:"6"}},[t("li",[e._v("在终端中使用以下命令重新加载 .bashrc 文件：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("source ~/.bashrc\n")])])]),t("p",[e._v("这将使 Bash shell 重新加载 .bashrc 文件，并使其中的环境变量和配置生效。")]),e._v(" "),t("p",[e._v("以上是在 Mac 系统中创建 .bashrc 文件并设置环境变量的步骤。需要注意的是，如果您的系统默认使用的不是 Bash shell，那么您可能需要创建其他类型的 shell 配置文件，例如 .zshrc（用于 Zsh shell）。")]),e._v(" "),t("h3",{attrs:{id:"签名报错"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#签名报错"}},[e._v("#")]),e._v(" 签名报错")]),e._v(" "),t("p",[e._v("上述生成ctx签名报错：:ERROR:chrome_main_delegate.cc(490)] Input value for private key must be a valid format (PKCS#8-format PEM-encoded RSA key).\n注意：这个错误可能是由于你的密钥文件格式不正确导致的。在使用 --pack-extension-key 参数时，需要使用 PKCS#8 格式的 PEM 编码 RSA 密钥，确保你的密钥文件是正确的格式。")]),e._v(" "),t("p",[e._v("你可以使用以下命令将已有的密钥文件转换为正确的格式：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("openssl pkcs8 -topk8 -inform PEM -outform PEM -in path/to/your/key.pem -out path/to/your/key_pkcs8.pem -nocrypt\n")])])]),t("p",[e._v("转换后的 key_pkcs8.pem 文件即可作为 --pack-extension-key 参数的值。重新执行生成 CRX 文件的命令，应该就不会出现相应的错误了。\n"),t("img",{attrs:{src:a(251)}})]),e._v(" "),t("h3",{attrs:{id:"已生成ctx文件后-拖拽进扩展程序报错"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#已生成ctx文件后-拖拽进扩展程序报错"}},[e._v("#")]),e._v(" 已生成ctx文件后，拖拽进扩展程序报错")]),e._v(" "),t("p",[e._v("上述已经生成ctx文件，然后拖拽到chrome扩展程序中，提示：该扩展程序未列在 Chrome 应用商店中，并可能是在您不知情的情况下添加的")]),e._v(" "),t("p",[e._v("这是因为Chrome Web Store要求所有的扩展都必须在商店中列出，并且需要审核通过之后才能在Chrome浏览器中安装。如果您想在Chrome浏览器中安装自己开发的扩展程序，可以通过以下步骤：")]),e._v(" "),t("p",[e._v("打开 Chrome 浏览器，点击地址栏中的“三个点”按钮，在弹出的下拉菜单中选择“更多工具” > “扩展程序”。")]),e._v(" "),t("p",[e._v("在扩展程序页面中，打开“开发者模式”，点击“加载已解压的扩展程序”按钮，选择您生成的CRX文件所在的文件夹，点击“选择文件夹”按钮。")]),e._v(" "),t("p",[e._v("此时您的扩展程序已经添加到了Chrome浏览器中，您可以在扩展程序页面中管理和使用它。")]),e._v(" "),t("p",[e._v("需要注意的是，由于未在Chrome Web Store中发布的扩展程序可能存在安全风险，所以谨慎使用未知来源的扩展程序。")]),e._v(" "),t("h3",{attrs:{id:"开发阶段引入的扩展程序应该是什么样的文件呢"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开发阶段引入的扩展程序应该是什么样的文件呢"}},[e._v("#")]),e._v(" 开发阶段引入的扩展程序应该是什么样的文件呢")]),e._v(" "),t("p",[e._v("当你在Chrome扩展程序中添加一个扩展时，你需要选择的文件而不是未压缩成ctx的文件（也就是开发的项目的包）。生成ctx文件的目的是为了使你的扩展程序更加安全，因为它包含了一个私钥，该私钥用于签名扩展程序。因此，当你在Chrome中添加一个扩展程序时，应该选择已经签名的ctx文件。")]),e._v(" "),t("img",{attrs:{src:a(252)}}),e._v(" "),t("img",{attrs:{src:a(253)}}),e._v(" "),t("h3",{attrs:{id:"加载插件报错"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#加载插件报错"}},[e._v("#")]),e._v(" 加载插件报错")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("上述中加载插件之后报错：Manifest version 2 is deprecated, and support will be removed in 2023. See https://developer.chrome.com/blog/mv2-transition/ for more details.\n原因是：上述报错是由于 Manifest Version 2 已经被弃用，官方计划在2023年底之前彻底移除对 Manifest Version 2 的支持。因此，建议将插件升级到 Manifest Version 3。\n升级 Manifest 版本需要修改 manifest.json 文件的格")])]),e._v(" "),t("li",[t("p",[e._v("上述中加载插件之后报错：Manifest version 2 is deprecated, and support will be removed in 2023. See https://developer.chrome.com/blog/mv2-transition/ for more details.\n这个错误是因为使用的 manifest.json 文件是版本 2 的格式，但是从 2023 年起，Chrome 将不再支持 Manifest version 2 的扩展程序。")])])]),e._v(" "),t("p",[e._v("要解决这个问题，您需要更新您的扩展程序以使用 Manifest version 3。Manifest version 3 引入了一些新的 API 和更强的隐私保护机制。")]),e._v(" "),t("p",[e._v("以下是一个 Manifest version 3 的 manifest.json 示例：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "manifest_version": 3,\n  "name": "My Extension",\n  "version": "1.0",\n  "description": "This is my extension",\n  "icons": {\n    "16": "icon16.png",\n    "48": "icon48.png",\n    "128": "icon128.png"\n  },\n  "action": {\n    "default_popup": "popup.html"\n  },\n  "permissions": ["tabs"]\n}\n')])])]),t("p",[e._v("请注意，Manifest version 3 与 Manifest version 2 有很多不同之处，包括：")]),e._v(" "),t("ul",[t("li",[e._v("不支持 inline scripts 和 eval()")]),e._v(" "),t("li",[e._v("不支持 background.html 或 background page")]),e._v(" "),t("li",[e._v("不支持 content script 和 page script 之间的通信\n因此，在将您的扩展程序从 Manifest version 2 升级到 Manifest version 3 时，您需要仔细阅读官方文档并做好充分的准备工作。")])]),e._v(" "),t("p",[e._v("另外，尽管 Manifest version 2 在未来将不再受支持，但它仍然是目前大多数扩展程序使用的版本，并且仍然可以在 Chrome 上运行。")]),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[e._v("上述中加载插件之后报错：Refused to execute inline script because it violates the following Content Security Policy directive: \"script-src 'self'\". Either the 'unsafe-inline' keyword, a hash ('sha256-jcjHcq5sT0+sWwyCSo8BdEmbTqEr2WSQ/rE4CzJH+Ew='), or a nonce ('nonce-...') is required to enable inline execution.")])]),e._v(" "),t("p",[e._v("这个错误是由于扩展程序中的某些脚本被阻止执行，因为它们违反了浏览器的内容安全策略（CSP）指令。CSP是一个安全功能，可帮助保护网站免受跨站点脚本（XSS）等攻击。")]),e._v(" "),t("p",[e._v('要解决这个问题，可以在manifest.json文件中的"content_security_policy"字段中添加必要的指令来解决此问题。例如，添加以下指令以允许内联脚本：')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\"content_security_policy\": \"script-src 'self' 'unsafe-inline'; object-src 'self'\"\n")])])]),t("p",[e._v("这里，我们添加了'unsafe-inline'来允许内联脚本执行。在开发扩展时，尽可能避免使用内联脚本或'unsafe-inline'指令，因为这会降低您的扩展程序的安全性。")]),e._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[e._v("上述中增加了content_security_policy配置后会报错：:ERROR:chrome_main_delegate.cc(490)] Invalid value for 'content_security_policy'.\n如果在 manifest.json 文件中增加了 content_security_policy 配置之后出现了错误，可能是因为该配置没有按照规范进行设置。 content_security_policy 的值应该是一个字符串，包含一个或多个指令，每个指令之间使用分号 ; 分隔。")])]),e._v(" "),t("p",[e._v("以下是一个示例 content_security_policy 配置：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"content_security_policy": {\n    "extension_pages": "script-src \'self\'; object-src \'self\'; connect-src https://tieba.baidu.com/;"\n  }\n')])])]),t("p",[e._v("上述配置指定了 default-src、script-src 和 object-src 三个指令，允许加载当前扩展程序的资源，并允许在当前页面中执行 self 源和 unsafe-eval 的脚本。这个配置的作用是防止其他域名的脚本污染扩展程序的页面。")]),e._v(" "),t("p",[e._v("请注意，在配置 content_security_policy 时需要仔细考虑每个指令的安全性，以确保扩展程序不会被恶意代码攻击。")])])}),[],!1,null,null,null);t.default=r.exports}}]);