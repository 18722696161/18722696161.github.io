(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{383:function(t,a,s){"use strict";s.r(a);var e=s(5),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨域"}},[t._v("#")]),t._v(" 跨域")]),t._v(" "),a("h2",{attrs:{id:"何为跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#何为跨域"}},[t._v("#")]),t._v(" 何为跨域")]),t._v(" "),a("p",[t._v("同源策略限制：协议、域名、端口任意一个不同都会造成跨域；无法读取非同源网页都localseorage、cookie、Dom和js对象，其实请求是可以的，只是请求回的数据会被浏览器拦截，认为是不安全的")]),t._v(" "),a("h2",{attrs:{id:"解决跨域的几种方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决跨域的几种方式"}},[t._v("#")]),t._v(" 解决跨域的几种方式")]),t._v(" "),a("h3",{attrs:{id:"jsonp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jsonp"}},[t._v("#")]),t._v(" jsonP")]),t._v(" "),a("p",[t._v("jsonP解决跨域，可以在img、link、script标签上添加url地址，浏览器是允许这三个标签进行非同源的请求的")]),t._v(" "),a("h3",{attrs:{id:"cors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cors"}},[t._v("#")]),t._v(" CORS")]),t._v(" "),a("p",[t._v("添加响应头解决：\nheader('Access-Control-Allow-Origin: ''"),a("em",[t._v("')，这个")]),t._v("是通配符所有请求地址都可以访问，服务器可以设置详细设置允许访问都请求地址；")]),t._v(" "),a("p",[t._v("还可以允许自定义请求头：header('Access-Control-Allow-Headers': 'X-Tesx-Cors')、允许这个自定义头的请求，发出真正请求前会先发送一个options的预请求，请求通过了才会发送真正的请求；")]),t._v(" "),a("p",[t._v("还有浏览器默认只允许get，options等请求，如果想请求put和post，需要加上header('Access-Control-Allow-Methods': 'POST, PUT, Delete')")]),t._v(" "),a("p",[t._v("还有个允许请求的时间，就是上述post，put请求的允许时间，这段时间内不需要预请求options：header('Access-Control-Allow-Age': '1000')")]),t._v(" "),a("h3",{attrs:{id:"node服务解决跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node服务解决跨域"}},[t._v("#")]),t._v(" node服务解决跨域")]),t._v(" "),a("p",[t._v("因为跨域是浏览器为保安全的一种策略，是限制浏览器的，并不会限制服务器，所有可以用node作为web服务器，用node对请求进行转发，那么就是服务器和服务器之间的请求，这样就不会造成跨域问题")]),t._v(" "),a("h3",{attrs:{id:"ginx实现跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ginx实现跨域"}},[t._v("#")]),t._v(" ginx实现跨域")]),t._v(" "),a("p",[t._v("这个其实和node服务器原理差不多，都是服务器与服务器之间的请求，不产生跨域，可归为一类")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("server{\n        location /api {\n                //拦截一下\n                proxy_pass http://www.baidu.com:81;\n    }\n}\n")])])]),a("h3",{attrs:{id:"webpack实现跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack实现跨域"}},[t._v("#")]),t._v(" webpack实现跨域")]),t._v(" "),a("p",[t._v("webpack实现跨域，proxy配置")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("devServer: {\n    // 设置端口\n    static: './dist/', //静态文件\n    port: 8080, //运行的端口号\n    open: true, //自动打开浏览器\n    hot: true, //自动热更新\n    // hotOnly: true,\n    compress: true, //压缩\n    proxy: {\n      '/api': {\n        target: 'http://localhost:9090/'\n      }\n    },\n    client: {\n      overlay: true,\n    },\n  },\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);