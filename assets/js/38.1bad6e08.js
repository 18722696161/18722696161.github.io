(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{320:function(r,e,n){"use strict";n.r(e);var t=n(5),a=Object(t.a)({},(function(){var r=this,e=r._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("h1",{attrs:{id:"日志及上报"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#日志及上报"}},[r._v("#")]),r._v(" 日志及上报")]),r._v(" "),e("h2",{attrs:{id:"概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[r._v("#")]),r._v(" 概念")]),r._v(" "),e("p",[r._v("前端日志上报指的是将前端应用程序的运行日志发送到远程服务器进行存储和分析的过程。这样做有利于开发人员监控应用程序的运行状态和错误，及时发现和解决问题，提高应用程序的可靠性和性能。")]),r._v(" "),e("p",[r._v("以下是前端日志上报的详细说明：")]),r._v(" "),e("p",[r._v("选择合适的日志上报工具：常见的日志上报工具包括Sentry、ELK、LogRocket等，根据实际需求选择合适的工具。")]),r._v(" "),e("p",[r._v("定义日志格式：定义清晰的日志格式有利于后期的分析和统计。一般来说，日志应该包括时间戳、错误类型、错误信息、页面URL等信息。")]),r._v(" "),e("p",[r._v("收集日志：通过JavaScript代码实现日志的收集。可以通过window.onerror方法、console.error方法或try-catch语句等方式来捕获错误信息。")]),r._v(" "),e("p",[r._v("上报日志：将收集到的日志通过HTTP请求或WebSocket协议发送到远程服务器进行存储和分析。可以设置上报的频率和批量大小等参数，以避免网络请求过于频繁或数据量过大。")]),r._v(" "),e("p",[r._v("分析日志：通过日志分析工具对上报的日志进行分析和统计，例如查找常见的错误类型、分析错误发生的原因等。这些分析结果可以帮助开发人员及时发现并解决问题，提高应用程序的可靠性和性能。")]),r._v(" "),e("p",[r._v("需要注意的是，在进行前端日志上报时，应该注意保护用户隐私和敏感信息。例如，不要在日志中记录用户的密码、信用卡信息等敏感信息，同时要遵守相关的隐私保护法规和标准。")]),r._v(" "),e("h2",{attrs:{id:"前端日志上报方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端日志上报方法"}},[r._v("#")]),r._v(" 前端日志上报方法")]),r._v(" "),e("h3",{attrs:{id:"window-onerror"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#window-onerror"}},[r._v("#")]),r._v(" window.onerror")]),r._v(" "),e("p",[r._v("window.onerror 是一个 JavaScript 全局事件处理函数，用于捕获全局代码中未被捕获的 JavaScript 错误，并在页面中显示错误信息或将错误信息发送到远程服务器。")]),r._v(" "),e("p",[r._v("当 JavaScript 运行时发生错误时，window.onerror 会自动被调用，并传递以下参数：")]),r._v(" "),e("p",[r._v("message: 错误信息字符串，描述错误的详细信息。\nurl: 错误发生的文件路径。\nlineNumber: 错误发生的行号。\ncolumnNumber: 错误发生的列号。\nerror: 包含错误信息的 Error 对象。\n使用 window.onerror 可以方便地收集前端应用程序的运行日志，帮助开发人员及时发现并解决问题。具体使用方法如下：")]),r._v(" "),e("ol",[e("li",[r._v("在 JavaScript 代码的最外层包裹一个 try-catch 语句，在 catch 中调用 window.onerror 方法并将错误信息作为参数传递。")])]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("try {\n  // 执行代码\n} catch (error) {\n  window.onerror(error.message, error.fileName, error.lineNumber, error.columnNumber, error);\n}\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[r._v("在 window.onerror 函数中，可以将错误信息记录到日志文件或发送到远程服务器进行分析和统计。")])]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("window.onerror = function (message, url, lineNumber, columnNumber, error) {\n  // 记录日志或将错误信息发送到服务器\n};\n")])])]),e("p",[r._v("需要注意的是，使用 window.onerror 可能存在一些局限性。例如，它只能捕获到 JavaScript 运行时的错误，而无法捕获到资源加载失败、跨域错误等其他类型的错误。此外，由于浏览器的安全限制，window.onerror 也无法获取跨域脚本中的错误信息。因此，在使用 window.onerror 进行错误捕获时，应该注意这些局限性，并选择合适的方法和工具来进行错误监控和日志上报。")]),r._v(" "),e("h3",{attrs:{id:"window-addeventlistener-error-function-event"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#window-addeventlistener-error-function-event"}},[r._v("#")]),r._v(" window.addEventListener('error', function(event) {}")]),r._v(" "),e("p",[r._v("确实，使用 window.onerror 存在一些局限性，例如无法捕获资源加载失败、跨域错误等问题。以下是一些解决这些局限性的方式：")]),r._v(" "),e("ol",[e("li",[r._v("使用 window.addEventListener('error', function(event) {}) 捕获资源加载失败和跨域错误。这种方式可以在事件回调函数中检查事件对象的属性，例如 event.target.src、event.filename 等，来获取相关信息并记录日志。")])]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("window.addEventListener('error', function(event) {\n  const target = event.target;\n  const filename = event.filename;\n  const message = event.message;\n  // 记录日志或将错误信息发送到服务器\n});\n")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);